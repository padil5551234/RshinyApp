}
.overview-box {
background: white;
border-radius: 15px;
padding: 25px;
box-shadow: 0 0 8px rgba(0,0,0,0.1);
margin-bottom: 20px;
font-size: 18px;
font-weight: 600;
color: #333;
}
/* New style for images in overview boxes */
.overview-box img {
border-radius: 10px;
margin-bottom: 15px;
width: 100%;
height: 120px; /* Fixed height for consistency */
object-fit: cover; /* Ensures image covers the area without distortion */
}
#aseanMap {
height: 600px;
border-radius: 20px;
box-shadow: 0 0 10px rgba(0,0,0,0.15);
}
.filter-group {
margin-bottom: 20px;
}
/* Responsive adjustments for overview boxes */
@media (max-width: 992px) {
.overview-box {
font-size: 16px;
padding: 20px;
}
.content {
margin-left: 0; /* Sidebar can be toggled or hidden on smaller screens */
}
.header {
left: 0;
}
.sidebar {
width: 100%;
height: auto;
position: relative;
flex-direction: row;
flex-wrap: wrap;
justify-content: space-around;
padding: 10px;
}
.sidebar .menu-item {
width: 45%; /* Two items per row */
text-align: center;
font-size: 16px;
}
}
@media (max-width: 768px) {
.sidebar .menu-item {
width: 100%; /* One item per row */
}
.header {
font-size: 18px;
padding: 0 15px;
}
.header .right {
gap: 10px;
font-size: 14px;
}
.content {
padding: 15px;
}
}
"))),
div(class = "sidebar",
actionLink("menu_overview", label = tagList(icon("clipboard"), "Overview"), class = "menu-item active"),
actionLink("menu_peta", label = tagList(icon("map-marker-alt"), "Peta"), class = "menu-item"),
actionLink("menu_grafik", label = tagList(icon("chart-bar"), "Grafik"), class = "menu-item"),
actionLink("menu_unduh", label = tagList(icon("download"), "Unduh"), class = "menu-item")
),
div(class = "header",
div("AIR INDEX POLLUTE"),
div(class = "right",
span("Help"),
div(class = "user-icon", icon("user")),
span("User")
)
),
div(class = "content",
tabsetPanel(id = "tabs", type = "hidden",
tabPanel("overview",
fluidRow(
column(4,
h3("Overview Data ASEAN", style = "color: #ff6600;"),
div(class = "overview-box", textOutput("avg_rainfall_asean")),
div(class = "overview-box", textOutput("avg_temperature_asean")),
div(class = "overview-box", textOutput("avg_humidity_asean"))
),
column(8,
h3("Overview Data Indonesia", style = "color: #3399ff;"),
div(class = "overview-box", textOutput("avg_rainfall_indonesia")),
div(class = "overview-box", textOutput("avg_temperature_indonesia")),
div(class = "overview-box", textOutput("avg_humidity_indonesia"))
)
),
hr(), # Separator
h3("Realtime Status per Negara (Latest Year)", style = "color: #555;"),
uiOutput("realtime_status_boxes")
),
tabPanel("peta",
fluidRow(
column(3,
selectInput("map_year", "Pilih Tahun:", choices = unique(asean_data$year), selected = max(asean_data$year)),
selectInput("map_indicator", "Pilih Indikator Heatmap:", choices = c("Curah Hujan", "Kelembapan", "Suhu"), selected = "Suhu")
),
column(9,
leafletOutput("aseanMap")
)
)
),
tabPanel("grafik",
fluidRow(
column(3,
selectInput("graph_country", "Pilih Negara:", choices = unique(asean_data$country_name), selected = "Indonesia"),
selectInput("graph_indicator", "Pilih Indikator:", choices = indicators_for_selection, selected = "Suhu"),
uiOutput("pollution_type_selector"),
sliderInput("graph_year", "Pilih Tahun:", min = min(asean_data$year), max = max(asean_data$year), value = c(min(asean_data$year), max(asean_data$year)), sep = "", step = 1),
radioButtons("plot_type", "Pilih Jenis Grafik:",
choices = c("Line Chart" = "line",
"Bar Chart" = "bar"),
selected = "line")
),
column(9,
plotlyOutput("indicator_plot")
)
)
),
tabPanel("unduh",
fluidRow(
column(3,
selectInput("download_country", "Pilih Negara:", choices = unique(asean_data$country_name), selected = "Indonesia"),
selectInput("download_indicator", "Pilih Indikator:", choices = indicators_for_selection, selected = "Suhu"),
uiOutput("download_pollution_type_selector"),
sliderInput("download_year", "Pilih Tahun:", min = min(asean_data$year), max = max(asean_data$year), value = c(min(asean_data$year), max(asean_data$year)), sep = "", step = 1),
downloadButton("download_data", "Download Data", class = "btn btn-primary mt-3")
),
column(9,
DTOutput("table_download")
)
)
)
)
)
)
# --- Server logic ---
server <- function(input, output, session) {
# Navigation
observeEvent(input$menu_overview, {
updateTabsetPanel(session, "tabs", selected = "overview")
runjs("$('.sidebar .menu-item').removeClass('active'); $('#menu_overview').addClass('active');")
})
observeEvent(input$menu_peta, {
updateTabsetPanel(session, "tabs", selected = "peta")
runjs("$('.sidebar .menu-item').removeClass('active'); $('#menu_peta').addClass('active');")
})
observeEvent(input$menu_grafik, {
updateTabsetPanel(session, "tabs", selected = "grafik")
runjs("$('.sidebar .menu-item').removeClass('active'); $('#menu_grafik').addClass('active');")
})
observeEvent(input$menu_unduh, {
updateTabsetPanel(session, "tabs", selected = "unduh")
runjs("$('.sidebar .menu-item').removeClass('active'); $('#menu_unduh').addClass('active');")
})
# Overview metrics for ASEAN (excluding Polusi)
output$avg_rainfall_asean <- renderText({
avg <- mean(asean_data$value[asean_data$Indicator == "Curah Hujan"], na.rm = TRUE)
paste("Rata-rata Curah Hujan ASEAN (mm):", round(avg, 1))
})
output$avg_temperature_asean <- renderText({
avg <- mean(asean_data$value[asean_data$Indicator == "Suhu"], na.rm = TRUE)
paste("Rata-rata Suhu ASEAN (°C):", round(avg, 1))
})
output$avg_humidity_asean <- renderText({
avg <- mean(asean_data$value[asean_data$Indicator == "Kelembapan"], na.rm = TRUE)
paste("Rata-rata Kelembapan ASEAN (%):", round(avg, 1))
})
# Overview metrics for Indonesia
output$avg_rainfall_indonesia <- renderText({
avg <- asean_data %>%
filter(country_name == "Indonesia", Indicator == "Curah Hujan") %>%
pull(value) %>%
mean(na.rm = TRUE)
paste("Rata-rata Curah Hujan Indonesia (mm):", round(avg, 1))
})
output$avg_temperature_indonesia <- renderText({
avg <- asean_data %>%
filter(country_name == "Indonesia", Indicator == "Suhu") %>%
pull(value) %>%
mean(na.rm = TRUE)
paste("Rata-rata Suhu Indonesia (°C):", round(avg, 1))
})
output$avg_humidity_indonesia <- renderText({
avg <- asean_data %>%
filter(country_name == "Indonesia", Indicator == "Kelembapan") %>%
pull(value) %>%
mean(na.rm = TRUE)
paste("Rata-rata Kelembapan Indonesia (%):", round(avg, 1))
})
# Map output
output$aseanMap <- renderLeaflet({
leaflet(asean_map) %>%
addProviderTiles(providers$CartoDB.Positron)
})
observe({
req(input$map_year, input$map_indicator)
indikator_peta <- input$map_indicator
df <- asean_data %>% filter(year == input$map_year, Indicator == indikator_peta)
df <- df %>% mutate(country_iso = toupper(trimws(country_iso)))
map_data <- asean_map %>% mutate(iso_a2 = toupper(trimws(iso_a2))) %>% left_join(df, by = c("iso_a2" = "country_iso"))
if (nrow(df) == 0 || all(is.na(map_data$value))) {
leafletProxy("aseanMap") %>%
clearShapes() %>%
clearControls() %>%
addPolygons(data = asean_map,
fillColor = "#cccccc",
weight = 2, color = "#444444",
fillOpacity = 0.5,
layerId = ~iso_a2,
label = ~name,
highlightOptions = highlightOptions(weight = 4, color = "black", bringToFront = TRUE))
return()
}
pal <- colorNumeric("YlOrRd", domain = map_data$value, na.color = "transparent")
leafletProxy("aseanMap") %>%
clearShapes() %>%
clearControls() %>%
addPolygons(data = map_data,
fillColor = ~pal(value),
weight = 2, color = "#444444",
fillOpacity = 0.7,
layerId = ~iso_a2,
label = ~paste0(name, "<br>", indikator_peta, ": ", round(value,1)),
highlightOptions = highlightOptions(weight = 4, color = "black", bringToFront = TRUE)) %>%
addLegend("bottomright", pal = pal, values = map_data$value,
title = paste(indikator_peta, "(", input$map_year, ")"),
opacity = 0.8)
})
observeEvent(input$aseanMap_shape_click, {
click <- input$aseanMap_shape_click
req(click$id, input$map_year)
info_data <- asean_data %>%
filter(country_iso == click$id, year == input$map_year) %>%
select(Indicator, value) %>%
tidyr::drop_na(value)
country_name <- unique(asean_data$country_name[asean_data$country_iso == click$id])
if(nrow(info_data) > 0){
popup_content_list <- c(
paste0("<b>", country_name, " (", input$map_year, ")</b>")
)
units <- list(
"Curah Hujan" = " mm",
"Suhu" = " °C",
"Kelembapan" = " %",
"Luas" = " km²"
)
display_indicators <- c("Suhu", "Curah Hujan", "Kelembapan", "Luas")
for (ind in display_indicators) {
val <- info_data$value[info_data$Indicator == ind]
if (length(val) > 0 && !is.na(val)) {
formatted_val <- if (ind == "Luas") format(val, big.mark = ",") else round(val, 1)
popup_content_list <- c(popup_content_list, paste0(ind, ": <b>", formatted_val, units[[ind]], "</b>"))
}
}
popup_text <- paste(popup_content_list, collapse = "<br/>")
} else {
popup_text <- "Data tidak tersedia untuk tahun ini."
}
leafletProxy("aseanMap") %>%
clearPopups() %>%
addPopups(lng = click$lng, lat = click$lat, popup = HTML(popup_text))
})
# Conditional UI for Pollution Type in Graph tab
output$pollution_type_selector <- renderUI({
if ("Polusi" %in% all_indicators && input$graph_indicator == "Polusi") {
selectInput("pollution_type", "Pilih Jenis Polusi:",
choices = pollution_types_example,
selected = pollution_types_example[1])
}
})
# Conditional UI for Pollution Type in Download tab
output$download_pollution_type_selector <- renderUI({
if ("Polusi" %in% all_indicators && input$download_indicator == "Polusi") {
selectInput("download_pollution_type", "Pilih Jenis Polusi:",
choices = pollution_types_example,
selected = pollution_types_example[1])
}
})
# Grafik filter & plot
filtered_graph_data <- reactive({
df <- asean_data %>%
filter(country_name == input$graph_country,
Indicator == input$graph_indicator,
year >= input$graph_year[1], year <= input$graph_year[2])
if (input$graph_indicator == "Polusi" && !is.null(input$pollution_type)) {
# Baris ini perlu disesuaikan jika data Anda memiliki kolom spesifik untuk jenis polusi
# Contoh: df <- df %>% filter(PollutionType == input$pollution_type)
}
df %>% arrange(year)
})
output$indicator_plot <- renderPlotly({
df <- filtered_graph_data()
req(nrow(df) > 0)
max_value <- max(df$value, na.rm = TRUE)
y_upper_limit <- max_value * 1.10 # 10% buffer
p <- ggplot(df, aes(x = year, y = value)) +
labs(title = paste("Indikator", input$graph_indicator, "di", input$graph_country),
x = "Tahun", y = input$graph_indicator) +
theme_minimal()
if (input$plot_type == "line") { #
p <- p + geom_line(color = "#ff6600", linewidth = 1.5) +
geom_point(color = "#ffcc66", size = 3)
} else if (input$plot_type == "bar") { #
p <- p + geom_col(fill = "#ff6600")
}
p <- p + coord_cartesian(ylim = c(0, y_upper_limit))
ggplotly(p)
})
# Data table for download tab
filtered_download_data <- reactive({
df <- asean_data %>%
filter(country_name == input$download_country,
Indicator == input$download_indicator,
year >= input$download_year[1], year <= input$download_year[2])
if (input$download_indicator == "Polusi" && !is.null(input$download_pollution_type)) {
# Baris ini perlu disesuaikan jika data Anda memiliki kolom spesifik untuk jenis polusi
# Contoh: df <- df %>% filter(PollutionType == input$download_pollution_type)
}
df %>% arrange(year) %>%
select(year, country_name, Indicator, value)
})
output$table_download <- renderDT({
datatable(filtered_download_data(), options = list(pageLength = 10, lengthChange = FALSE))
})
output$download_data <- downloadHandler(
filename = function() {
paste0("data_", input$download_country, "_", input$download_indicator,
if (input$download_indicator == "Polusi" && !is.null(input$download_pollution_type)) paste0("_", input$download_pollution_type) else "",
"_", input$download_year[1], "-", input$download_year[2], ".csv")
},
content = function(file) {
write.csv(filtered_download_data(), file, row.names = FALSE)
}
)
}
shinyApp(ui, server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='SO+SjLGyYtuiY8LeF84IxgQQIy6GDoQ7SYHCCZoT')
library(rsconnect)
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='SO+SjLGyYtuiY8LeF84IxgQQIy6GDoQ7SYHCCZoT')
rsconnect::deployApp("C:\Users\PADIL M ZAKI\OneDrive\Documents\Projek R\AQI_ASEAN.R")
library(rsconnect)
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='SO+SjLGyYtuiY8LeF84IxgQQIy6GDoQ7SYHCCZoT')
rsconnect::deployApp('C:\Users\PADIL M ZAKI\OneDrive\Documents\Projek R\AQI_ASEAN.R')
library(rsconnect)
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='SO+SjLGyYtuiY8LeF84IxgQQIy6GDoQ7SYHCCZoT')
rsconnect::deployApp('C:/Users/PADIL M ZAKI/OneDrive/Documents/Projek R/AQI_ASEAN.R')
library(rsconnect)
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='SO+SjLGyYtuiY8LeF84IxgQQIy6GDoQ7SYHCCZoT')
rsconnect::deployApp('C:/Users/PADIL M ZAKI/OneDrive/Documents/Projek R')
library(rsconnect)
rsconnect::setAccountInfo(name='padil',
token='047B7B5EA8171E3A1857BDB28D77A3AD',
secret='SO+SjLGyYtuiY8LeF84IxgQQIy6GDoQ7SYHCCZoT')
rsconnect::deployApp('C:/Users/PADIL M ZAKI/OneDrive/Documents/Projek R/my_app')
load("C:/Users/PADIL M ZAKI/OneDrive/Documents/Projek R/.RData")
load("C:/Users/PADIL M ZAKI/OneDrive/Documents/Projek R/.RData")
library(rsconnect)
deployApp()
# =====================================================================================
# KODE LENGKAP - app.R (FINAL YANG SUDAH DIPERBAIKI)
# =====================================================================================
library(shiny)
library(leaflet)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
library(sf)
library(rnaturalearth)
library(shinyjs)
library(fontawesome)
library(scales)
library(tidyr) # Untuk pivot_longer, separate
library(GGally) # Untuk matriks korelasi
library(car) # Untuk VIF dalam regresi
library(cluster) # Untuk K-Means clustering
library(factoextra) # Untuk PCA dan visualisasi clustering
library(readxl)
# =====================================================================================
#
# BAGIAN 1: IMPOR DAN TRANSFORMASI DATA
#
# =====================================================================================
# REKOMENDASI: Simpan file "finaldataasean.csv" di folder yang sama dengan app.R
# Lalu gunakan path relatif seperti di bawah ini agar mudah dipindahkan.
all_data_raw <- read.csv2("finaldataasean.csv")
runApp('Projek R/ui.R')
# =====================================================================================
# KODE LENGKAP - app.R (FINAL YANG SUDAH DIPERBAIKI)
# =====================================================================================
library(shiny)
library(leaflet)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
library(sf)
library(rnaturalearth)
library(shinyjs)
library(fontawesome)
library(scales)
library(tidyr) # Untuk pivot_longer, separate
library(GGally) # Untuk matriks korelasi
library(car) # Untuk VIF dalam regresi
library(cluster) # Untuk K-Means clustering
library(factoextra) # Untuk PCA dan visualisasi clustering
library(readxl)
# =====================================================================================
#
# BAGIAN 1: IMPOR DAN TRANSFORMASI DATA
#
# =====================================================================================
# REKOMENDASI: Simpan file "finaldataasean.csv" di folder yang sama dengan app.R
# Lalu gunakan path relatif seperti di bawah ini agar mudah dipindahkan.
all_data_raw <- read.csv2("finaldataasean.csv")
# =====================================================================================
# KODE LENGKAP - app.R (FINAL YANG SUDAH DIPERBAIKI)
# =====================================================================================
library(shiny)
library(leaflet)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
library(sf)
library(rnaturalearth)
library(shinyjs)
library(fontawesome)
library(scales)
library(tidyr) # Untuk pivot_longer, separate
library(GGally) # Untuk matriks korelasi
library(car) # Untuk VIF dalam regresi
library(cluster) # Untuk K-Means clustering
library(factoextra) # Untuk PCA dan visualisasi clustering
library(readxl)
# =====================================================================================
#
# BAGIAN 1: IMPOR DAN TRANSFORMASI DATA
#
# =====================================================================================
# REKOMENDASI: Simpan file "finaldataasean.csv" di folder yang sama dengan app.R
# Lalu gunakan path relatif seperti di bawah ini agar mudah dipindahkan.
all_data_raw <- read.csv2("finaldataasean.csv")
runApp('Projek R/ui.R')
# =====================================================================================
# KODE LENGKAP - app.R (FINAL YANG SUDAH DIPERBAIKI)
# =====================================================================================
library(shiny)
library(leaflet)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
library(sf)
library(rnaturalearth)
library(shinyjs)
library(fontawesome)
library(scales)
library(tidyr) # Untuk pivot_longer, separate
library(GGally) # Untuk matriks korelasi
library(car) # Untuk VIF dalam regresi
library(cluster) # Untuk K-Means clustering
library(factoextra) # Untuk PCA dan visualisasi clustering
library(readxl)
# =====================================================================================
#
# BAGIAN 1: IMPOR DAN TRANSFORMASI DATA
#
# =====================================================================================
# REKOMENDASI: Simpan file "finaldataasean.csv" di folder yang sama dengan app.R
# Lalu gunakan path relatif seperti di bawah ini agar mudah dipindahkan.
all_data_raw <- read.csv2("finaldataasean.csv")
setwd("C:/Users/PADIL M ZAKI/Downloads/NEW1")
setwd("C:/Users/PADIL M ZAKI/Downloads/NEW1")
setwd("C:/Users/PADIL M ZAKI/Downloads/NEW1")
shiny::runApp()
runApp()
